// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"net-project-edu_manage/internal/infrastructure/db/master/model"
)

func newGrade(db *gorm.DB, opts ...gen.DOOption) grade {
	_grade := grade{}

	_grade.gradeDo.UseDB(db, opts...)
	_grade.gradeDo.UseModel(&model.Grade{})

	tableName := _grade.gradeDo.TableName()
	_grade.ALL = field.NewAsterisk(tableName)
	_grade.ID = field.NewInt64(tableName, "id")
	_grade.Name = field.NewString(tableName, "name")
	_grade.CreatedAt = field.NewTime(tableName, "created_at")
	_grade.UpdatedAt = field.NewTime(tableName, "updated_at")
	_grade.CreatedBy = field.NewString(tableName, "created_by")
	_grade.UpdatedBy = field.NewString(tableName, "updated_by")

	_grade.fillFieldMap()

	return _grade
}

// grade 年级类型表
type grade struct {
	gradeDo

	ALL       field.Asterisk
	ID        field.Int64  // 年级ID
	Name      field.String // 年级名称，例如 高一、初三
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 最后更新时间
	CreatedBy field.String // 创建人ID
	UpdatedBy field.String // 最后修改人ID

	fieldMap map[string]field.Expr
}

func (g grade) Table(newTableName string) *grade {
	g.gradeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g grade) As(alias string) *grade {
	g.gradeDo.DO = *(g.gradeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *grade) updateTableName(table string) *grade {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *grade) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *grade) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g grade) clone(db *gorm.DB) grade {
	g.gradeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g grade) replaceDB(db *gorm.DB) grade {
	g.gradeDo.ReplaceDB(db)
	return g
}

type gradeDo struct{ gen.DO }

type IGradeDo interface {
	gen.SubQuery
	Debug() IGradeDo
	WithContext(ctx context.Context) IGradeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGradeDo
	WriteDB() IGradeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGradeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGradeDo
	Not(conds ...gen.Condition) IGradeDo
	Or(conds ...gen.Condition) IGradeDo
	Select(conds ...field.Expr) IGradeDo
	Where(conds ...gen.Condition) IGradeDo
	Order(conds ...field.Expr) IGradeDo
	Distinct(cols ...field.Expr) IGradeDo
	Omit(cols ...field.Expr) IGradeDo
	Join(table schema.Tabler, on ...field.Expr) IGradeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGradeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGradeDo
	Group(cols ...field.Expr) IGradeDo
	Having(conds ...gen.Condition) IGradeDo
	Limit(limit int) IGradeDo
	Offset(offset int) IGradeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGradeDo
	Unscoped() IGradeDo
	Create(values ...*model.Grade) error
	CreateInBatches(values []*model.Grade, batchSize int) error
	Save(values ...*model.Grade) error
	First() (*model.Grade, error)
	Take() (*model.Grade, error)
	Last() (*model.Grade, error)
	Find() ([]*model.Grade, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Grade, err error)
	FindInBatches(result *[]*model.Grade, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Grade) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGradeDo
	Assign(attrs ...field.AssignExpr) IGradeDo
	Joins(fields ...field.RelationField) IGradeDo
	Preload(fields ...field.RelationField) IGradeDo
	FirstOrInit() (*model.Grade, error)
	FirstOrCreate() (*model.Grade, error)
	FindByPage(offset int, limit int) (result []*model.Grade, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGradeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gradeDo) Debug() IGradeDo {
	return g.withDO(g.DO.Debug())
}

func (g gradeDo) WithContext(ctx context.Context) IGradeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gradeDo) ReadDB() IGradeDo {
	return g.Clauses(dbresolver.Read)
}

func (g gradeDo) WriteDB() IGradeDo {
	return g.Clauses(dbresolver.Write)
}

func (g gradeDo) Session(config *gorm.Session) IGradeDo {
	return g.withDO(g.DO.Session(config))
}

func (g gradeDo) Clauses(conds ...clause.Expression) IGradeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gradeDo) Returning(value interface{}, columns ...string) IGradeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gradeDo) Not(conds ...gen.Condition) IGradeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gradeDo) Or(conds ...gen.Condition) IGradeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gradeDo) Select(conds ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gradeDo) Where(conds ...gen.Condition) IGradeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gradeDo) Order(conds ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gradeDo) Distinct(cols ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gradeDo) Omit(cols ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gradeDo) Join(table schema.Tabler, on ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gradeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGradeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gradeDo) RightJoin(table schema.Tabler, on ...field.Expr) IGradeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gradeDo) Group(cols ...field.Expr) IGradeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gradeDo) Having(conds ...gen.Condition) IGradeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gradeDo) Limit(limit int) IGradeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gradeDo) Offset(offset int) IGradeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gradeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGradeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gradeDo) Unscoped() IGradeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gradeDo) Create(values ...*model.Grade) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gradeDo) CreateInBatches(values []*model.Grade, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gradeDo) Save(values ...*model.Grade) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gradeDo) First() (*model.Grade, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grade), nil
	}
}

func (g gradeDo) Take() (*model.Grade, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grade), nil
	}
}

func (g gradeDo) Last() (*model.Grade, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grade), nil
	}
}

func (g gradeDo) Find() ([]*model.Grade, error) {
	result, err := g.DO.Find()
	return result.([]*model.Grade), err
}

func (g gradeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Grade, err error) {
	buf := make([]*model.Grade, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gradeDo) FindInBatches(result *[]*model.Grade, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gradeDo) Attrs(attrs ...field.AssignExpr) IGradeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gradeDo) Assign(attrs ...field.AssignExpr) IGradeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gradeDo) Joins(fields ...field.RelationField) IGradeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gradeDo) Preload(fields ...field.RelationField) IGradeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gradeDo) FirstOrInit() (*model.Grade, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grade), nil
	}
}

func (g gradeDo) FirstOrCreate() (*model.Grade, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grade), nil
	}
}

func (g gradeDo) FindByPage(offset int, limit int) (result []*model.Grade, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gradeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gradeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gradeDo) Delete(models ...*model.Grade) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gradeDo) withDO(do gen.Dao) *gradeDo {
	g.DO = *do.(*gen.DO)
	return g
}
