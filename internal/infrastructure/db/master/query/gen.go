// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	AcademicYear *academicYear
	Class        *class
	Grade        *grade
	GradeYear    *gradeYear
	SystemUser   *systemUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AcademicYear = &Q.AcademicYear
	Class = &Q.Class
	Grade = &Q.Grade
	GradeYear = &Q.GradeYear
	SystemUser = &Q.SystemUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		AcademicYear: newAcademicYear(db, opts...),
		Class:        newClass(db, opts...),
		Grade:        newGrade(db, opts...),
		GradeYear:    newGradeYear(db, opts...),
		SystemUser:   newSystemUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AcademicYear academicYear
	Class        class
	Grade        grade
	GradeYear    gradeYear
	SystemUser   systemUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		AcademicYear: q.AcademicYear.clone(db),
		Class:        q.Class.clone(db),
		Grade:        q.Grade.clone(db),
		GradeYear:    q.GradeYear.clone(db),
		SystemUser:   q.SystemUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		AcademicYear: q.AcademicYear.replaceDB(db),
		Class:        q.Class.replaceDB(db),
		Grade:        q.Grade.replaceDB(db),
		GradeYear:    q.GradeYear.replaceDB(db),
		SystemUser:   q.SystemUser.replaceDB(db),
	}
}

type queryCtx struct {
	AcademicYear IAcademicYearDo
	Class        IClassDo
	Grade        IGradeDo
	GradeYear    IGradeYearDo
	SystemUser   ISystemUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AcademicYear: q.AcademicYear.WithContext(ctx),
		Class:        q.Class.WithContext(ctx),
		Grade:        q.Grade.WithContext(ctx),
		GradeYear:    q.GradeYear.WithContext(ctx),
		SystemUser:   q.SystemUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
