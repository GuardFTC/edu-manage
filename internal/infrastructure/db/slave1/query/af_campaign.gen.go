// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"net-project-edu_manage/internal/infrastructure/db/slave1/model"
)

func newAfCampaign(db *gorm.DB, opts ...gen.DOOption) afCampaign {
	_afCampaign := afCampaign{}

	_afCampaign.afCampaignDo.UseDB(db, opts...)
	_afCampaign.afCampaignDo.UseModel(&model.AfCampaign{})

	tableName := _afCampaign.afCampaignDo.TableName()
	_afCampaign.ALL = field.NewAsterisk(tableName)
	_afCampaign.ID = field.NewInt64(tableName, "id")
	_afCampaign.GameID = field.NewInt32(tableName, "game_id")
	_afCampaign.Dt = field.NewInt32(tableName, "dt")
	_afCampaign.DataType = field.NewString(tableName, "data_type")
	_afCampaign.Platform = field.NewString(tableName, "platform")
	_afCampaign.Country = field.NewString(tableName, "country")
	_afCampaign.MediaSource = field.NewString(tableName, "media_source")
	_afCampaign.AdType = field.NewString(tableName, "ad_type")
	_afCampaign.Campaign = field.NewString(tableName, "campaign")
	_afCampaign.CampaignID = field.NewString(tableName, "campaign_id")
	_afCampaign.Nu = field.NewInt32(tableName, "nu")
	_afCampaign.Rev0 = field.NewFloat64(tableName, "rev0")
	_afCampaign.Rev1 = field.NewFloat64(tableName, "rev1")
	_afCampaign.Rev7 = field.NewFloat64(tableName, "rev7")
	_afCampaign.Rev30 = field.NewFloat64(tableName, "rev30")
	_afCampaign.Ua1 = field.NewInt32(tableName, "ua1")
	_afCampaign.Ua7 = field.NewInt32(tableName, "ua7")
	_afCampaign.Ua30 = field.NewInt32(tableName, "ua30")
	_afCampaign.TdIaprev = field.NewFloat64(tableName, "td_iaprev")
	_afCampaign.TdIaarev = field.NewFloat64(tableName, "td_iaarev")
	_afCampaign.DeviceLaunch = field.NewInt32(tableName, "device_launch")
	_afCampaign.Click = field.NewInt32(tableName, "click")
	_afCampaign.Cost = field.NewFloat64(tableName, "cost")
	_afCampaign.Impression = field.NewInt32(tableName, "impression")
	_afCampaign.TotalCost = field.NewFloat64(tableName, "total_cost")
	_afCampaign.TotalDays = field.NewInt32(tableName, "total_days")
	_afCampaign.TotalNu = field.NewInt32(tableName, "total_nu")
	_afCampaign.TotalIaarev = field.NewFloat64(tableName, "total_iaarev")
	_afCampaign.TotalIaprev = field.NewFloat64(tableName, "total_iaprev")

	_afCampaign.fillFieldMap()

	return _afCampaign
}

type afCampaign struct {
	afCampaignDo

	ALL          field.Asterisk
	ID           field.Int64
	GameID       field.Int32
	Dt           field.Int32
	DataType     field.String // 日、周、月
	Platform     field.String
	Country      field.String
	MediaSource  field.String
	AdType       field.String
	Campaign     field.String
	CampaignID   field.String
	Nu           field.Int32
	Rev0         field.Float64
	Rev1         field.Float64
	Rev7         field.Float64
	Rev30        field.Float64
	Ua1          field.Int32
	Ua7          field.Int32
	Ua30         field.Int32
	TdIaprev     field.Float64
	TdIaarev     field.Float64
	DeviceLaunch field.Int32
	Click        field.Int32
	Cost         field.Float64
	Impression   field.Int32
	TotalCost    field.Float64
	TotalDays    field.Int32
	TotalNu      field.Int32
	TotalIaarev  field.Float64
	TotalIaprev  field.Float64

	fieldMap map[string]field.Expr
}

func (a afCampaign) Table(newTableName string) *afCampaign {
	a.afCampaignDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a afCampaign) As(alias string) *afCampaign {
	a.afCampaignDo.DO = *(a.afCampaignDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *afCampaign) updateTableName(table string) *afCampaign {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.GameID = field.NewInt32(table, "game_id")
	a.Dt = field.NewInt32(table, "dt")
	a.DataType = field.NewString(table, "data_type")
	a.Platform = field.NewString(table, "platform")
	a.Country = field.NewString(table, "country")
	a.MediaSource = field.NewString(table, "media_source")
	a.AdType = field.NewString(table, "ad_type")
	a.Campaign = field.NewString(table, "campaign")
	a.CampaignID = field.NewString(table, "campaign_id")
	a.Nu = field.NewInt32(table, "nu")
	a.Rev0 = field.NewFloat64(table, "rev0")
	a.Rev1 = field.NewFloat64(table, "rev1")
	a.Rev7 = field.NewFloat64(table, "rev7")
	a.Rev30 = field.NewFloat64(table, "rev30")
	a.Ua1 = field.NewInt32(table, "ua1")
	a.Ua7 = field.NewInt32(table, "ua7")
	a.Ua30 = field.NewInt32(table, "ua30")
	a.TdIaprev = field.NewFloat64(table, "td_iaprev")
	a.TdIaarev = field.NewFloat64(table, "td_iaarev")
	a.DeviceLaunch = field.NewInt32(table, "device_launch")
	a.Click = field.NewInt32(table, "click")
	a.Cost = field.NewFloat64(table, "cost")
	a.Impression = field.NewInt32(table, "impression")
	a.TotalCost = field.NewFloat64(table, "total_cost")
	a.TotalDays = field.NewInt32(table, "total_days")
	a.TotalNu = field.NewInt32(table, "total_nu")
	a.TotalIaarev = field.NewFloat64(table, "total_iaarev")
	a.TotalIaprev = field.NewFloat64(table, "total_iaprev")

	a.fillFieldMap()

	return a
}

func (a *afCampaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *afCampaign) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 29)
	a.fieldMap["id"] = a.ID
	a.fieldMap["game_id"] = a.GameID
	a.fieldMap["dt"] = a.Dt
	a.fieldMap["data_type"] = a.DataType
	a.fieldMap["platform"] = a.Platform
	a.fieldMap["country"] = a.Country
	a.fieldMap["media_source"] = a.MediaSource
	a.fieldMap["ad_type"] = a.AdType
	a.fieldMap["campaign"] = a.Campaign
	a.fieldMap["campaign_id"] = a.CampaignID
	a.fieldMap["nu"] = a.Nu
	a.fieldMap["rev0"] = a.Rev0
	a.fieldMap["rev1"] = a.Rev1
	a.fieldMap["rev7"] = a.Rev7
	a.fieldMap["rev30"] = a.Rev30
	a.fieldMap["ua1"] = a.Ua1
	a.fieldMap["ua7"] = a.Ua7
	a.fieldMap["ua30"] = a.Ua30
	a.fieldMap["td_iaprev"] = a.TdIaprev
	a.fieldMap["td_iaarev"] = a.TdIaarev
	a.fieldMap["device_launch"] = a.DeviceLaunch
	a.fieldMap["click"] = a.Click
	a.fieldMap["cost"] = a.Cost
	a.fieldMap["impression"] = a.Impression
	a.fieldMap["total_cost"] = a.TotalCost
	a.fieldMap["total_days"] = a.TotalDays
	a.fieldMap["total_nu"] = a.TotalNu
	a.fieldMap["total_iaarev"] = a.TotalIaarev
	a.fieldMap["total_iaprev"] = a.TotalIaprev
}

func (a afCampaign) clone(db *gorm.DB) afCampaign {
	a.afCampaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a afCampaign) replaceDB(db *gorm.DB) afCampaign {
	a.afCampaignDo.ReplaceDB(db)
	return a
}

type afCampaignDo struct{ gen.DO }

type IAfCampaignDo interface {
	gen.SubQuery
	Debug() IAfCampaignDo
	WithContext(ctx context.Context) IAfCampaignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAfCampaignDo
	WriteDB() IAfCampaignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAfCampaignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAfCampaignDo
	Not(conds ...gen.Condition) IAfCampaignDo
	Or(conds ...gen.Condition) IAfCampaignDo
	Select(conds ...field.Expr) IAfCampaignDo
	Where(conds ...gen.Condition) IAfCampaignDo
	Order(conds ...field.Expr) IAfCampaignDo
	Distinct(cols ...field.Expr) IAfCampaignDo
	Omit(cols ...field.Expr) IAfCampaignDo
	Join(table schema.Tabler, on ...field.Expr) IAfCampaignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAfCampaignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAfCampaignDo
	Group(cols ...field.Expr) IAfCampaignDo
	Having(conds ...gen.Condition) IAfCampaignDo
	Limit(limit int) IAfCampaignDo
	Offset(offset int) IAfCampaignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAfCampaignDo
	Unscoped() IAfCampaignDo
	Create(values ...*model.AfCampaign) error
	CreateInBatches(values []*model.AfCampaign, batchSize int) error
	Save(values ...*model.AfCampaign) error
	First() (*model.AfCampaign, error)
	Take() (*model.AfCampaign, error)
	Last() (*model.AfCampaign, error)
	Find() ([]*model.AfCampaign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AfCampaign, err error)
	FindInBatches(result *[]*model.AfCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AfCampaign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAfCampaignDo
	Assign(attrs ...field.AssignExpr) IAfCampaignDo
	Joins(fields ...field.RelationField) IAfCampaignDo
	Preload(fields ...field.RelationField) IAfCampaignDo
	FirstOrInit() (*model.AfCampaign, error)
	FirstOrCreate() (*model.AfCampaign, error)
	FindByPage(offset int, limit int) (result []*model.AfCampaign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAfCampaignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a afCampaignDo) Debug() IAfCampaignDo {
	return a.withDO(a.DO.Debug())
}

func (a afCampaignDo) WithContext(ctx context.Context) IAfCampaignDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a afCampaignDo) ReadDB() IAfCampaignDo {
	return a.Clauses(dbresolver.Read)
}

func (a afCampaignDo) WriteDB() IAfCampaignDo {
	return a.Clauses(dbresolver.Write)
}

func (a afCampaignDo) Session(config *gorm.Session) IAfCampaignDo {
	return a.withDO(a.DO.Session(config))
}

func (a afCampaignDo) Clauses(conds ...clause.Expression) IAfCampaignDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a afCampaignDo) Returning(value interface{}, columns ...string) IAfCampaignDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a afCampaignDo) Not(conds ...gen.Condition) IAfCampaignDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a afCampaignDo) Or(conds ...gen.Condition) IAfCampaignDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a afCampaignDo) Select(conds ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a afCampaignDo) Where(conds ...gen.Condition) IAfCampaignDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a afCampaignDo) Order(conds ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a afCampaignDo) Distinct(cols ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a afCampaignDo) Omit(cols ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a afCampaignDo) Join(table schema.Tabler, on ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a afCampaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a afCampaignDo) RightJoin(table schema.Tabler, on ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a afCampaignDo) Group(cols ...field.Expr) IAfCampaignDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a afCampaignDo) Having(conds ...gen.Condition) IAfCampaignDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a afCampaignDo) Limit(limit int) IAfCampaignDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a afCampaignDo) Offset(offset int) IAfCampaignDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a afCampaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAfCampaignDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a afCampaignDo) Unscoped() IAfCampaignDo {
	return a.withDO(a.DO.Unscoped())
}

func (a afCampaignDo) Create(values ...*model.AfCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a afCampaignDo) CreateInBatches(values []*model.AfCampaign, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a afCampaignDo) Save(values ...*model.AfCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a afCampaignDo) First() (*model.AfCampaign, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AfCampaign), nil
	}
}

func (a afCampaignDo) Take() (*model.AfCampaign, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AfCampaign), nil
	}
}

func (a afCampaignDo) Last() (*model.AfCampaign, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AfCampaign), nil
	}
}

func (a afCampaignDo) Find() ([]*model.AfCampaign, error) {
	result, err := a.DO.Find()
	return result.([]*model.AfCampaign), err
}

func (a afCampaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AfCampaign, err error) {
	buf := make([]*model.AfCampaign, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a afCampaignDo) FindInBatches(result *[]*model.AfCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a afCampaignDo) Attrs(attrs ...field.AssignExpr) IAfCampaignDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a afCampaignDo) Assign(attrs ...field.AssignExpr) IAfCampaignDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a afCampaignDo) Joins(fields ...field.RelationField) IAfCampaignDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a afCampaignDo) Preload(fields ...field.RelationField) IAfCampaignDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a afCampaignDo) FirstOrInit() (*model.AfCampaign, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AfCampaign), nil
	}
}

func (a afCampaignDo) FirstOrCreate() (*model.AfCampaign, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AfCampaign), nil
	}
}

func (a afCampaignDo) FindByPage(offset int, limit int) (result []*model.AfCampaign, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a afCampaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a afCampaignDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a afCampaignDo) Delete(models ...*model.AfCampaign) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *afCampaignDo) withDO(do gen.Dao) *afCampaignDo {
	a.DO = *do.(*gen.DO)
	return a
}
