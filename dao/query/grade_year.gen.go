// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"net-project-edu_manage/dao/model"
)

func newGradeYear(db *gorm.DB, opts ...gen.DOOption) gradeYear {
	_gradeYear := gradeYear{}

	_gradeYear.gradeYearDo.UseDB(db, opts...)
	_gradeYear.gradeYearDo.UseModel(&model.GradeYear{})

	tableName := _gradeYear.gradeYearDo.TableName()
	_gradeYear.ALL = field.NewAsterisk(tableName)
	_gradeYear.ID = field.NewInt64(tableName, "id")
	_gradeYear.GradeID = field.NewInt64(tableName, "grade_id")
	_gradeYear.AcademicYearID = field.NewInt64(tableName, "academic_year_id")
	_gradeYear.CreatedAt = field.NewTime(tableName, "created_at")
	_gradeYear.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gradeYear.CreatedBy = field.NewString(tableName, "created_by")
	_gradeYear.UpdatedBy = field.NewString(tableName, "updated_by")

	_gradeYear.fillFieldMap()

	return _gradeYear
}

// gradeYear 年级与学年的对应关系表
type gradeYear struct {
	gradeYearDo

	ALL            field.Asterisk
	ID             field.Int64  // 年级学年关联ID
	GradeID        field.Int64  // 年级ID（逻辑外键）
	AcademicYearID field.Int64  // 学年ID（逻辑外键）
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 最后更新时间
	CreatedBy      field.String // 创建人ID
	UpdatedBy      field.String // 最后修改人ID

	fieldMap map[string]field.Expr
}

func (g gradeYear) Table(newTableName string) *gradeYear {
	g.gradeYearDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gradeYear) As(alias string) *gradeYear {
	g.gradeYearDo.DO = *(g.gradeYearDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gradeYear) updateTableName(table string) *gradeYear {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.GradeID = field.NewInt64(table, "grade_id")
	g.AcademicYearID = field.NewInt64(table, "academic_year_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *gradeYear) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gradeYear) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["grade_id"] = g.GradeID
	g.fieldMap["academic_year_id"] = g.AcademicYearID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g gradeYear) clone(db *gorm.DB) gradeYear {
	g.gradeYearDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gradeYear) replaceDB(db *gorm.DB) gradeYear {
	g.gradeYearDo.ReplaceDB(db)
	return g
}

type gradeYearDo struct{ gen.DO }

type IGradeYearDo interface {
	gen.SubQuery
	Debug() IGradeYearDo
	WithContext(ctx context.Context) IGradeYearDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGradeYearDo
	WriteDB() IGradeYearDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGradeYearDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGradeYearDo
	Not(conds ...gen.Condition) IGradeYearDo
	Or(conds ...gen.Condition) IGradeYearDo
	Select(conds ...field.Expr) IGradeYearDo
	Where(conds ...gen.Condition) IGradeYearDo
	Order(conds ...field.Expr) IGradeYearDo
	Distinct(cols ...field.Expr) IGradeYearDo
	Omit(cols ...field.Expr) IGradeYearDo
	Join(table schema.Tabler, on ...field.Expr) IGradeYearDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGradeYearDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGradeYearDo
	Group(cols ...field.Expr) IGradeYearDo
	Having(conds ...gen.Condition) IGradeYearDo
	Limit(limit int) IGradeYearDo
	Offset(offset int) IGradeYearDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGradeYearDo
	Unscoped() IGradeYearDo
	Create(values ...*model.GradeYear) error
	CreateInBatches(values []*model.GradeYear, batchSize int) error
	Save(values ...*model.GradeYear) error
	First() (*model.GradeYear, error)
	Take() (*model.GradeYear, error)
	Last() (*model.GradeYear, error)
	Find() ([]*model.GradeYear, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GradeYear, err error)
	FindInBatches(result *[]*model.GradeYear, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GradeYear) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGradeYearDo
	Assign(attrs ...field.AssignExpr) IGradeYearDo
	Joins(fields ...field.RelationField) IGradeYearDo
	Preload(fields ...field.RelationField) IGradeYearDo
	FirstOrInit() (*model.GradeYear, error)
	FirstOrCreate() (*model.GradeYear, error)
	FindByPage(offset int, limit int) (result []*model.GradeYear, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGradeYearDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gradeYearDo) Debug() IGradeYearDo {
	return g.withDO(g.DO.Debug())
}

func (g gradeYearDo) WithContext(ctx context.Context) IGradeYearDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gradeYearDo) ReadDB() IGradeYearDo {
	return g.Clauses(dbresolver.Read)
}

func (g gradeYearDo) WriteDB() IGradeYearDo {
	return g.Clauses(dbresolver.Write)
}

func (g gradeYearDo) Session(config *gorm.Session) IGradeYearDo {
	return g.withDO(g.DO.Session(config))
}

func (g gradeYearDo) Clauses(conds ...clause.Expression) IGradeYearDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gradeYearDo) Returning(value interface{}, columns ...string) IGradeYearDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gradeYearDo) Not(conds ...gen.Condition) IGradeYearDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gradeYearDo) Or(conds ...gen.Condition) IGradeYearDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gradeYearDo) Select(conds ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gradeYearDo) Where(conds ...gen.Condition) IGradeYearDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gradeYearDo) Order(conds ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gradeYearDo) Distinct(cols ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gradeYearDo) Omit(cols ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gradeYearDo) Join(table schema.Tabler, on ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gradeYearDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gradeYearDo) RightJoin(table schema.Tabler, on ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gradeYearDo) Group(cols ...field.Expr) IGradeYearDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gradeYearDo) Having(conds ...gen.Condition) IGradeYearDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gradeYearDo) Limit(limit int) IGradeYearDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gradeYearDo) Offset(offset int) IGradeYearDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gradeYearDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGradeYearDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gradeYearDo) Unscoped() IGradeYearDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gradeYearDo) Create(values ...*model.GradeYear) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gradeYearDo) CreateInBatches(values []*model.GradeYear, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gradeYearDo) Save(values ...*model.GradeYear) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gradeYearDo) First() (*model.GradeYear, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradeYear), nil
	}
}

func (g gradeYearDo) Take() (*model.GradeYear, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradeYear), nil
	}
}

func (g gradeYearDo) Last() (*model.GradeYear, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradeYear), nil
	}
}

func (g gradeYearDo) Find() ([]*model.GradeYear, error) {
	result, err := g.DO.Find()
	return result.([]*model.GradeYear), err
}

func (g gradeYearDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GradeYear, err error) {
	buf := make([]*model.GradeYear, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gradeYearDo) FindInBatches(result *[]*model.GradeYear, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gradeYearDo) Attrs(attrs ...field.AssignExpr) IGradeYearDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gradeYearDo) Assign(attrs ...field.AssignExpr) IGradeYearDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gradeYearDo) Joins(fields ...field.RelationField) IGradeYearDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gradeYearDo) Preload(fields ...field.RelationField) IGradeYearDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gradeYearDo) FirstOrInit() (*model.GradeYear, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradeYear), nil
	}
}

func (g gradeYearDo) FirstOrCreate() (*model.GradeYear, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GradeYear), nil
	}
}

func (g gradeYearDo) FindByPage(offset int, limit int) (result []*model.GradeYear, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gradeYearDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gradeYearDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gradeYearDo) Delete(models ...*model.GradeYear) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gradeYearDo) withDO(do gen.Dao) *gradeYearDo {
	g.DO = *do.(*gen.DO)
	return g
}
