// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"net-project-edu_manage/dao/model"
)

func newAcademicYear(db *gorm.DB, opts ...gen.DOOption) academicYear {
	_academicYear := academicYear{}

	_academicYear.academicYearDo.UseDB(db, opts...)
	_academicYear.academicYearDo.UseModel(&model.AcademicYear{})

	tableName := _academicYear.academicYearDo.TableName()
	_academicYear.ALL = field.NewAsterisk(tableName)
	_academicYear.ID = field.NewInt64(tableName, "id")
	_academicYear.Name = field.NewString(tableName, "name")
	_academicYear.StartDate = field.NewTime(tableName, "start_date")
	_academicYear.EndDate = field.NewTime(tableName, "end_date")
	_academicYear.CreatedAt = field.NewTime(tableName, "created_at")
	_academicYear.UpdatedAt = field.NewTime(tableName, "updated_at")
	_academicYear.CreatedBy = field.NewString(tableName, "created_by")
	_academicYear.UpdatedBy = field.NewString(tableName, "updated_by")

	_academicYear.fillFieldMap()

	return _academicYear
}

// academicYear 学年信息表
type academicYear struct {
	academicYearDo

	ALL       field.Asterisk
	ID        field.Int64  // 学年ID
	Name      field.String // 学年名称，例如 2025-2026
	StartDate field.Time   // 学年开始日期
	EndDate   field.Time   // 学年结束日期
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 最后更新时间
	CreatedBy field.String // 创建人ID
	UpdatedBy field.String // 最后修改人ID

	fieldMap map[string]field.Expr
}

func (a academicYear) Table(newTableName string) *academicYear {
	a.academicYearDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a academicYear) As(alias string) *academicYear {
	a.academicYearDo.DO = *(a.academicYearDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *academicYear) updateTableName(table string) *academicYear {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.StartDate = field.NewTime(table, "start_date")
	a.EndDate = field.NewTime(table, "end_date")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.CreatedBy = field.NewString(table, "created_by")
	a.UpdatedBy = field.NewString(table, "updated_by")

	a.fillFieldMap()

	return a
}

func (a *academicYear) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *academicYear) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["start_date"] = a.StartDate
	a.fieldMap["end_date"] = a.EndDate
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["updated_by"] = a.UpdatedBy
}

func (a academicYear) clone(db *gorm.DB) academicYear {
	a.academicYearDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a academicYear) replaceDB(db *gorm.DB) academicYear {
	a.academicYearDo.ReplaceDB(db)
	return a
}

type academicYearDo struct{ gen.DO }

type IAcademicYearDo interface {
	gen.SubQuery
	Debug() IAcademicYearDo
	WithContext(ctx context.Context) IAcademicYearDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAcademicYearDo
	WriteDB() IAcademicYearDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAcademicYearDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAcademicYearDo
	Not(conds ...gen.Condition) IAcademicYearDo
	Or(conds ...gen.Condition) IAcademicYearDo
	Select(conds ...field.Expr) IAcademicYearDo
	Where(conds ...gen.Condition) IAcademicYearDo
	Order(conds ...field.Expr) IAcademicYearDo
	Distinct(cols ...field.Expr) IAcademicYearDo
	Omit(cols ...field.Expr) IAcademicYearDo
	Join(table schema.Tabler, on ...field.Expr) IAcademicYearDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAcademicYearDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAcademicYearDo
	Group(cols ...field.Expr) IAcademicYearDo
	Having(conds ...gen.Condition) IAcademicYearDo
	Limit(limit int) IAcademicYearDo
	Offset(offset int) IAcademicYearDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAcademicYearDo
	Unscoped() IAcademicYearDo
	Create(values ...*model.AcademicYear) error
	CreateInBatches(values []*model.AcademicYear, batchSize int) error
	Save(values ...*model.AcademicYear) error
	First() (*model.AcademicYear, error)
	Take() (*model.AcademicYear, error)
	Last() (*model.AcademicYear, error)
	Find() ([]*model.AcademicYear, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AcademicYear, err error)
	FindInBatches(result *[]*model.AcademicYear, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AcademicYear) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAcademicYearDo
	Assign(attrs ...field.AssignExpr) IAcademicYearDo
	Joins(fields ...field.RelationField) IAcademicYearDo
	Preload(fields ...field.RelationField) IAcademicYearDo
	FirstOrInit() (*model.AcademicYear, error)
	FirstOrCreate() (*model.AcademicYear, error)
	FindByPage(offset int, limit int) (result []*model.AcademicYear, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAcademicYearDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a academicYearDo) Debug() IAcademicYearDo {
	return a.withDO(a.DO.Debug())
}

func (a academicYearDo) WithContext(ctx context.Context) IAcademicYearDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a academicYearDo) ReadDB() IAcademicYearDo {
	return a.Clauses(dbresolver.Read)
}

func (a academicYearDo) WriteDB() IAcademicYearDo {
	return a.Clauses(dbresolver.Write)
}

func (a academicYearDo) Session(config *gorm.Session) IAcademicYearDo {
	return a.withDO(a.DO.Session(config))
}

func (a academicYearDo) Clauses(conds ...clause.Expression) IAcademicYearDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a academicYearDo) Returning(value interface{}, columns ...string) IAcademicYearDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a academicYearDo) Not(conds ...gen.Condition) IAcademicYearDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a academicYearDo) Or(conds ...gen.Condition) IAcademicYearDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a academicYearDo) Select(conds ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a academicYearDo) Where(conds ...gen.Condition) IAcademicYearDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a academicYearDo) Order(conds ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a academicYearDo) Distinct(cols ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a academicYearDo) Omit(cols ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a academicYearDo) Join(table schema.Tabler, on ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a academicYearDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a academicYearDo) RightJoin(table schema.Tabler, on ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a academicYearDo) Group(cols ...field.Expr) IAcademicYearDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a academicYearDo) Having(conds ...gen.Condition) IAcademicYearDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a academicYearDo) Limit(limit int) IAcademicYearDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a academicYearDo) Offset(offset int) IAcademicYearDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a academicYearDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAcademicYearDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a academicYearDo) Unscoped() IAcademicYearDo {
	return a.withDO(a.DO.Unscoped())
}

func (a academicYearDo) Create(values ...*model.AcademicYear) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a academicYearDo) CreateInBatches(values []*model.AcademicYear, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a academicYearDo) Save(values ...*model.AcademicYear) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a academicYearDo) First() (*model.AcademicYear, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AcademicYear), nil
	}
}

func (a academicYearDo) Take() (*model.AcademicYear, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AcademicYear), nil
	}
}

func (a academicYearDo) Last() (*model.AcademicYear, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AcademicYear), nil
	}
}

func (a academicYearDo) Find() ([]*model.AcademicYear, error) {
	result, err := a.DO.Find()
	return result.([]*model.AcademicYear), err
}

func (a academicYearDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AcademicYear, err error) {
	buf := make([]*model.AcademicYear, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a academicYearDo) FindInBatches(result *[]*model.AcademicYear, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a academicYearDo) Attrs(attrs ...field.AssignExpr) IAcademicYearDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a academicYearDo) Assign(attrs ...field.AssignExpr) IAcademicYearDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a academicYearDo) Joins(fields ...field.RelationField) IAcademicYearDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a academicYearDo) Preload(fields ...field.RelationField) IAcademicYearDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a academicYearDo) FirstOrInit() (*model.AcademicYear, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AcademicYear), nil
	}
}

func (a academicYearDo) FirstOrCreate() (*model.AcademicYear, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AcademicYear), nil
	}
}

func (a academicYearDo) FindByPage(offset int, limit int) (result []*model.AcademicYear, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a academicYearDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a academicYearDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a academicYearDo) Delete(models ...*model.AcademicYear) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *academicYearDo) withDO(do gen.Dao) *academicYearDo {
	a.DO = *do.(*gen.DO)
	return a
}
